package edu.utep.cybershare.elseweb.ontology;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: DataBand <br>
 * @version generated on Thu Feb 13 13:45:51 GMT-07:00 2014 by nick
 */

public interface DataBand extends Band {

    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#encodingOfCharacteristic
     */
     
    /**
     * Gets all property values for the encodingOfCharacteristic property.<p>
     * 
     * @returns a collection of values for the encodingOfCharacteristic property.
     */
    Collection<? extends Characteristic> getEncodingOfCharacteristic();

    /**
     * Checks if the class has a encodingOfCharacteristic property value.<p>
     * 
     * @return true if there is a encodingOfCharacteristic property value.
     */
    boolean hasEncodingOfCharacteristic();

    /**
     * Adds a encodingOfCharacteristic property value.<p>
     * 
     * @param newEncodingOfCharacteristic the encodingOfCharacteristic property value to be added
     */
    void addEncodingOfCharacteristic(Characteristic newEncodingOfCharacteristic);

    /**
     * Removes a encodingOfCharacteristic property value.<p>
     * 
     * @param oldEncodingOfCharacteristic the encodingOfCharacteristic property value to be removed.
     */
    void removeEncodingOfCharacteristic(Characteristic oldEncodingOfCharacteristic);


    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasBandIdentification
     */
     
    /**
     * Gets all property values for the hasBandIdentification property.<p>
     * 
     * @returns a collection of values for the hasBandIdentification property.
     */
    Collection<? extends BandIdentification> getHasBandIdentification();

    /**
     * Checks if the class has a hasBandIdentification property value.<p>
     * 
     * @return true if there is a hasBandIdentification property value.
     */
    boolean hasHasBandIdentification();

    /**
     * Adds a hasBandIdentification property value.<p>
     * 
     * @param newHasBandIdentification the hasBandIdentification property value to be added
     */
    void addHasBandIdentification(BandIdentification newHasBandIdentification);

    /**
     * Removes a hasBandIdentification property value.<p>
     * 
     * @param oldHasBandIdentification the hasBandIdentification property value to be removed.
     */
    void removeHasBandIdentification(BandIdentification oldHasBandIdentification);


    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasUnits
     */
     
    /**
     * Gets all property values for the hasUnits property.<p>
     * 
     * @returns a collection of values for the hasUnits property.
     */
    Collection<? extends Unit> getHasUnits();

    /**
     * Checks if the class has a hasUnits property value.<p>
     * 
     * @return true if there is a hasUnits property value.
     */
    boolean hasHasUnits();

    /**
     * Adds a hasUnits property value.<p>
     * 
     * @param newHasUnits the hasUnits property value to be added
     */
    void addHasUnits(Unit newHasUnits);

    /**
     * Removes a hasUnits property value.<p>
     * 
     * @param oldHasUnits the hasUnits property value to be removed.
     */
    void removeHasUnits(Unit oldHasUnits);


    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#representsEntity
     */
     
    /**
     * Gets all property values for the representsEntity property.<p>
     * 
     * @returns a collection of values for the representsEntity property.
     */
    Collection<? extends Entity> getRepresentsEntity();

    /**
     * Checks if the class has a representsEntity property value.<p>
     * 
     * @return true if there is a representsEntity property value.
     */
    boolean hasRepresentsEntity();

    /**
     * Adds a representsEntity property value.<p>
     * 
     * @param newRepresentsEntity the representsEntity property value to be added
     */
    void addRepresentsEntity(Entity newRepresentsEntity);

    /**
     * Removes a representsEntity property value.<p>
     * 
     * @param oldRepresentsEntity the representsEntity property value to be removed.
     */
    void removeRepresentsEntity(Entity oldRepresentsEntity);


    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasMaximumValue
     */
     
    /**
     * Gets all property values for the hasMaximumValue property.<p>
     * 
     * @returns a collection of values for the hasMaximumValue property.
     */
    Collection<? extends Object> getHasMaximumValue();

    /**
     * Checks if the class has a hasMaximumValue property value.<p>
     * 
     * @return true if there is a hasMaximumValue property value.
     */
    boolean hasHasMaximumValue();

    /**
     * Adds a hasMaximumValue property value.<p>
     * 
     * @param newHasMaximumValue the hasMaximumValue property value to be added
     */
    void addHasMaximumValue(Object newHasMaximumValue);

    /**
     * Removes a hasMaximumValue property value.<p>
     * 
     * @param oldHasMaximumValue the hasMaximumValue property value to be removed.
     */
    void removeHasMaximumValue(Object oldHasMaximumValue);



    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasMinimumValue
     */
     
    /**
     * Gets all property values for the hasMinimumValue property.<p>
     * 
     * @returns a collection of values for the hasMinimumValue property.
     */
    Collection<? extends Object> getHasMinimumValue();

    /**
     * Checks if the class has a hasMinimumValue property value.<p>
     * 
     * @return true if there is a hasMinimumValue property value.
     */
    boolean hasHasMinimumValue();

    /**
     * Adds a hasMinimumValue property value.<p>
     * 
     * @param newHasMinimumValue the hasMinimumValue property value to be added
     */
    void addHasMinimumValue(Object newHasMinimumValue);

    /**
     * Removes a hasMinimumValue property value.<p>
     * 
     * @param oldHasMinimumValue the hasMinimumValue property value to be removed.
     */
    void removeHasMinimumValue(Object oldHasMinimumValue);



    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasNoDataValue
     */
     
    /**
     * Gets all property values for the hasNoDataValue property.<p>
     * 
     * @returns a collection of values for the hasNoDataValue property.
     */
    Collection<? extends Object> getHasNoDataValue();

    /**
     * Checks if the class has a hasNoDataValue property value.<p>
     * 
     * @return true if there is a hasNoDataValue property value.
     */
    boolean hasHasNoDataValue();

    /**
     * Adds a hasNoDataValue property value.<p>
     * 
     * @param newHasNoDataValue the hasNoDataValue property value to be added
     */
    void addHasNoDataValue(Object newHasNoDataValue);

    /**
     * Removes a hasNoDataValue property value.<p>
     * 
     * @param oldHasNoDataValue the hasNoDataValue property value to be removed.
     */
    void removeHasNoDataValue(Object oldHasNoDataValue);



    /* ***************************************************
     * Property http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#hasResolution
     */
     
    /**
     * Gets all property values for the hasResolution property.<p>
     * 
     * @returns a collection of values for the hasResolution property.
     */
    Collection<? extends Object> getHasResolution();

    /**
     * Checks if the class has a hasResolution property value.<p>
     * 
     * @return true if there is a hasResolution property value.
     */
    boolean hasHasResolution();

    /**
     * Adds a hasResolution property value.<p>
     * 
     * @param newHasResolution the hasResolution property value to be added
     */
    void addHasResolution(Object newHasResolution);

    /**
     * Removes a hasResolution property value.<p>
     * 
     * @param oldHasResolution the hasResolution property value to be removed.
     */
    void removeHasResolution(Object oldHasResolution);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
