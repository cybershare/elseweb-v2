package edu.utep.cybershare.elseweb.ontology;

import edu.utep.cybershare.elseweb.ontology.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ELSEWebFactory<br>
 * @version generated on Thu Feb 13 13:45:51 GMT-07:00 2014 by nick
 */
public class Factory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public Factory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public Factory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Band
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Band", Band.class, DefaultBand.class);
    }

    /**
     * Creates an instance of type Band.  Modifies the underlying ontology.
     */
    public Band createBand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BAND, DefaultBand.class);
    }

    /**
     * Gets an instance of type Band with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Band getBand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BAND, DefaultBand.class);
    }

    /**
     * Gets all instances of Band from the ontology.
     */
    public Collection<? extends Band> getAllBandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BAND, DefaultBand.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#BandIdentification
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#BandIdentification", BandIdentification.class, DefaultBandIdentification.class);
    }

    /**
     * Creates an instance of type BandIdentification.  Modifies the underlying ontology.
     */
    public BandIdentification createBandIdentification(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BANDIDENTIFICATION, DefaultBandIdentification.class);
    }

    /**
     * Gets an instance of type BandIdentification with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BandIdentification getBandIdentification(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BANDIDENTIFICATION, DefaultBandIdentification.class);
    }

    /**
     * Gets all instances of BandIdentification from the ontology.
     */
    public Collection<? extends BandIdentification> getAllBandIdentificationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BANDIDENTIFICATION, DefaultBandIdentification.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#BoxedGeographicRegion
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#BoxedGeographicRegion", BoxedGeographicRegion.class, DefaultBoxedGeographicRegion.class);
    }

    /**
     * Creates an instance of type BoxedGeographicRegion.  Modifies the underlying ontology.
     */
    public BoxedGeographicRegion createBoxedGeographicRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOXEDGEOGRAPHICREGION, DefaultBoxedGeographicRegion.class);
    }

    /**
     * Gets an instance of type BoxedGeographicRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoxedGeographicRegion getBoxedGeographicRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOXEDGEOGRAPHICREGION, DefaultBoxedGeographicRegion.class);
    }

    /**
     * Gets all instances of BoxedGeographicRegion from the ontology.
     */
    public Collection<? extends BoxedGeographicRegion> getAllBoxedGeographicRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOXEDGEOGRAPHICREGION, DefaultBoxedGeographicRegion.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Characteristic
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Characteristic", Characteristic.class, DefaultCharacteristic.class);
    }

    /**
     * Creates an instance of type Characteristic.  Modifies the underlying ontology.
     */
    public Characteristic createCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }

    /**
     * Gets an instance of type Characteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Characteristic getCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }

    /**
     * Gets all instances of Characteristic from the ontology.
     */
    public Collection<? extends Characteristic> getAllCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#ContainerFormat
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#ContainerFormat", ContainerFormat.class, DefaultContainerFormat.class);
    }

    /**
     * Creates an instance of type ContainerFormat.  Modifies the underlying ontology.
     */
    public ContainerFormat createContainerFormat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTAINERFORMAT, DefaultContainerFormat.class);
    }

    /**
     * Gets an instance of type ContainerFormat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ContainerFormat getContainerFormat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTAINERFORMAT, DefaultContainerFormat.class);
    }

    /**
     * Gets all instances of ContainerFormat from the ontology.
     */
    public Collection<? extends ContainerFormat> getAllContainerFormatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTAINERFORMAT, DefaultContainerFormat.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DataBand
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DataBand", DataBand.class, DefaultDataBand.class);
    }

    /**
     * Creates an instance of type DataBand.  Modifies the underlying ontology.
     */
    public DataBand createDataBand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATABAND, DefaultDataBand.class);
    }

    /**
     * Gets an instance of type DataBand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataBand getDataBand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATABAND, DefaultDataBand.class);
    }

    /**
     * Gets all instances of DataBand from the ontology.
     */
    public Collection<? extends DataBand> getAllDataBandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATABAND, DefaultDataBand.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DatasetManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DatasetManifestation", DatasetManifestation.class, DefaultDatasetManifestation.class);
    }

    /**
     * Creates an instance of type DatasetManifestation.  Modifies the underlying ontology.
     */
    public DatasetManifestation createDatasetManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASETMANIFESTATION, DefaultDatasetManifestation.class);
    }

    /**
     * Gets an instance of type DatasetManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DatasetManifestation getDatasetManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASETMANIFESTATION, DefaultDatasetManifestation.class);
    }

    /**
     * Gets all instances of DatasetManifestation from the ontology.
     */
    public Collection<? extends DatasetManifestation> getAllDatasetManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASETMANIFESTATION, DefaultDatasetManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Date
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Date", Date.class, DefaultDate.class);
    }

    /**
     * Creates an instance of type Date.  Modifies the underlying ontology.
     */
    public Date createDate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATE, DefaultDate.class);
    }

    /**
     * Gets an instance of type Date with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Date getDate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATE, DefaultDate.class);
    }

    /**
     * Gets all instances of Date from the ontology.
     */
    public Collection<? extends Date> getAllDateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATE, DefaultDate.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DateRange
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#DateRange", DateRange.class, DefaultDateRange.class);
    }

    /**
     * Creates an instance of type DateRange.  Modifies the underlying ontology.
     */
    public DateRange createDateRange(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATERANGE, DefaultDateRange.class);
    }

    /**
     * Gets an instance of type DateRange with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DateRange getDateRange(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATERANGE, DefaultDateRange.class);
    }

    /**
     * Gets all instances of DateRange from the ontology.
     */
    public Collection<? extends DateRange> getAllDateRangeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATERANGE, DefaultDateRange.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Duration
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Duration", Duration.class, DefaultDuration.class);
    }

    /**
     * Creates an instance of type Duration.  Modifies the underlying ontology.
     */
    public Duration createDuration(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DURATION, DefaultDuration.class);
    }

    /**
     * Gets an instance of type Duration with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Duration getDuration(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DURATION, DefaultDuration.class);
    }

    /**
     * Gets all instances of Duration from the ontology.
     */
    public Collection<? extends Duration> getAllDurationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DURATION, DefaultDuration.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Entity
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Entity", Entity.class, DefaultEntity.class);
    }

    /**
     * Creates an instance of type Entity.  Modifies the underlying ontology.
     */
    public Entity createEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets an instance of type Entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entity getEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets all instances of Entity from the ontology.
     */
    public Collection<? extends Entity> getAllEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#FeatureSet
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#FeatureSet", FeatureSet.class, DefaultFeatureSet.class);
    }

    /**
     * Creates an instance of type FeatureSet.  Modifies the underlying ontology.
     */
    public FeatureSet createFeatureSet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FEATURESET, DefaultFeatureSet.class);
    }

    /**
     * Gets an instance of type FeatureSet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FeatureSet getFeatureSet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FEATURESET, DefaultFeatureSet.class);
    }

    /**
     * Gets all instances of FeatureSet from the ontology.
     */
    public Collection<? extends FeatureSet> getAllFeatureSetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FEATURESET, DefaultFeatureSet.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#FileManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#FileManifestation", FileManifestation.class, DefaultFileManifestation.class);
    }

    /**
     * Creates an instance of type FileManifestation.  Modifies the underlying ontology.
     */
    public FileManifestation createFileManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FILEMANIFESTATION, DefaultFileManifestation.class);
    }

    /**
     * Gets an instance of type FileManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FileManifestation getFileManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FILEMANIFESTATION, DefaultFileManifestation.class);
    }

    /**
     * Gets all instances of FileManifestation from the ontology.
     */
    public Collection<? extends FileManifestation> getAllFileManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FILEMANIFESTATION, DefaultFileManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Format
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Format", Format.class, DefaultFormat.class);
    }

    /**
     * Creates an instance of type Format.  Modifies the underlying ontology.
     */
    public Format createFormat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORMAT, DefaultFormat.class);
    }

    /**
     * Gets an instance of type Format with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Format getFormat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORMAT, DefaultFormat.class);
    }

    /**
     * Gets all instances of Format from the ontology.
     */
    public Collection<? extends Format> getAllFormatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORMAT, DefaultFormat.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#GeographicRegion
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#GeographicRegion", GeographicRegion.class, DefaultGeographicRegion.class);
    }

    /**
     * Creates an instance of type GeographicRegion.  Modifies the underlying ontology.
     */
    public GeographicRegion createGeographicRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GEOGRAPHICREGION, DefaultGeographicRegion.class);
    }

    /**
     * Gets an instance of type GeographicRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeographicRegion getGeographicRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GEOGRAPHICREGION, DefaultGeographicRegion.class);
    }

    /**
     * Gets all instances of GeographicRegion from the ontology.
     */
    public Collection<? extends GeographicRegion> getAllGeographicRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GEOGRAPHICREGION, DefaultGeographicRegion.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#GeospatialDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#GeospatialDataset", GeospatialDataset.class, DefaultGeospatialDataset.class);
    }

    /**
     * Creates an instance of type GeospatialDataset.  Modifies the underlying ontology.
     */
    public GeospatialDataset createGeospatialDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GEOSPATIALDATASET, DefaultGeospatialDataset.class);
    }

    /**
     * Gets an instance of type GeospatialDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GeospatialDataset getGeospatialDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GEOSPATIALDATASET, DefaultGeospatialDataset.class);
    }

    /**
     * Gets all instances of GeospatialDataset from the ontology.
     */
    public Collection<? extends GeospatialDataset> getAllGeospatialDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GEOSPATIALDATASET, DefaultGeospatialDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Instant
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Instant", Instant.class, DefaultInstant.class);
    }

    /**
     * Creates an instance of type Instant.  Modifies the underlying ontology.
     */
    public Instant createInstant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INSTANT, DefaultInstant.class);
    }

    /**
     * Gets an instance of type Instant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Instant getInstant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INSTANT, DefaultInstant.class);
    }

    /**
     * Gets all instances of Instant from the ontology.
     */
    public Collection<? extends Instant> getAllInstantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INSTANT, DefaultInstant.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Layer
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Layer", Layer.class, DefaultLayer.class);
    }

    /**
     * Creates an instance of type Layer.  Modifies the underlying ontology.
     */
    public Layer createLayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAYER, DefaultLayer.class);
    }

    /**
     * Gets an instance of type Layer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Layer getLayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAYER, DefaultLayer.class);
    }

    /**
     * Gets all instances of Layer from the ontology.
     */
    public Collection<? extends Layer> getAllLayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAYER, DefaultLayer.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#MetadataFormat
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#MetadataFormat", MetadataFormat.class, DefaultMetadataFormat.class);
    }

    /**
     * Creates an instance of type MetadataFormat.  Modifies the underlying ontology.
     */
    public MetadataFormat createMetadataFormat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METADATAFORMAT, DefaultMetadataFormat.class);
    }

    /**
     * Gets an instance of type MetadataFormat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MetadataFormat getMetadataFormat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METADATAFORMAT, DefaultMetadataFormat.class);
    }

    /**
     * Gets all instances of MetadataFormat from the ontology.
     */
    public Collection<? extends MetadataFormat> getAllMetadataFormatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METADATAFORMAT, DefaultMetadataFormat.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#NamedGeographicRegion
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#NamedGeographicRegion", NamedGeographicRegion.class, DefaultNamedGeographicRegion.class);
    }

    /**
     * Creates an instance of type NamedGeographicRegion.  Modifies the underlying ontology.
     */
    public NamedGeographicRegion createNamedGeographicRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NAMEDGEOGRAPHICREGION, DefaultNamedGeographicRegion.class);
    }

    /**
     * Gets an instance of type NamedGeographicRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NamedGeographicRegion getNamedGeographicRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NAMEDGEOGRAPHICREGION, DefaultNamedGeographicRegion.class);
    }

    /**
     * Gets all instances of NamedGeographicRegion from the ontology.
     */
    public Collection<? extends NamedGeographicRegion> getAllNamedGeographicRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NAMEDGEOGRAPHICREGION, DefaultNamedGeographicRegion.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#OGCResponseManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#OGCResponseManifestation", OGCResponseManifestation.class, DefaultOGCResponseManifestation.class);
    }

    /**
     * Creates an instance of type OGCResponseManifestation.  Modifies the underlying ontology.
     */
    public OGCResponseManifestation createOGCResponseManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OGCRESPONSEMANIFESTATION, DefaultOGCResponseManifestation.class);
    }

    /**
     * Gets an instance of type OGCResponseManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OGCResponseManifestation getOGCResponseManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OGCRESPONSEMANIFESTATION, DefaultOGCResponseManifestation.class);
    }

    /**
     * Gets all instances of OGCResponseManifestation from the ontology.
     */
    public Collection<? extends OGCResponseManifestation> getAllOGCResponseManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OGCRESPONSEMANIFESTATION, DefaultOGCResponseManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#OGCServiceManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#OGCServiceManifestation", OGCServiceManifestation.class, DefaultOGCServiceManifestation.class);
    }

    /**
     * Creates an instance of type OGCServiceManifestation.  Modifies the underlying ontology.
     */
    public OGCServiceManifestation createOGCServiceManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OGCSERVICEMANIFESTATION, DefaultOGCServiceManifestation.class);
    }

    /**
     * Gets an instance of type OGCServiceManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OGCServiceManifestation getOGCServiceManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OGCSERVICEMANIFESTATION, DefaultOGCServiceManifestation.class);
    }

    /**
     * Gets all instances of OGCServiceManifestation from the ontology.
     */
    public Collection<? extends OGCServiceManifestation> getAllOGCServiceManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OGCSERVICEMANIFESTATION, DefaultOGCServiceManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#PayloadFormat
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#PayloadFormat", PayloadFormat.class, DefaultPayloadFormat.class);
    }

    /**
     * Creates an instance of type PayloadFormat.  Modifies the underlying ontology.
     */
    public PayloadFormat createPayloadFormat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PAYLOADFORMAT, DefaultPayloadFormat.class);
    }

    /**
     * Gets an instance of type PayloadFormat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PayloadFormat getPayloadFormat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PAYLOADFORMAT, DefaultPayloadFormat.class);
    }

    /**
     * Gets all instances of PayloadFormat from the ontology.
     */
    public Collection<? extends PayloadFormat> getAllPayloadFormatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PAYLOADFORMAT, DefaultPayloadFormat.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Projection
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Projection", Projection.class, DefaultProjection.class);
    }

    /**
     * Creates an instance of type Projection.  Modifies the underlying ontology.
     */
    public Projection createProjection(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECTION, DefaultProjection.class);
    }

    /**
     * Gets an instance of type Projection with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Projection getProjection(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECTION, DefaultProjection.class);
    }

    /**
     * Gets all instances of Projection from the ontology.
     */
    public Collection<? extends Projection> getAllProjectionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECTION, DefaultProjection.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#RasterDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#RasterDataset", RasterDataset.class, DefaultRasterDataset.class);
    }

    /**
     * Creates an instance of type RasterDataset.  Modifies the underlying ontology.
     */
    public RasterDataset createRasterDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RASTERDATASET, DefaultRasterDataset.class);
    }

    /**
     * Gets an instance of type RasterDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RasterDataset getRasterDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RASTERDATASET, DefaultRasterDataset.class);
    }

    /**
     * Gets all instances of RasterDataset from the ontology.
     */
    public Collection<? extends RasterDataset> getAllRasterDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RASTERDATASET, DefaultRasterDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#ServiceManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#ServiceManifestation", ServiceManifestation.class, DefaultServiceManifestation.class);
    }

    /**
     * Creates an instance of type ServiceManifestation.  Modifies the underlying ontology.
     */
    public ServiceManifestation createServiceManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SERVICEMANIFESTATION, DefaultServiceManifestation.class);
    }

    /**
     * Gets an instance of type ServiceManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ServiceManifestation getServiceManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SERVICEMANIFESTATION, DefaultServiceManifestation.class);
    }

    /**
     * Gets all instances of ServiceManifestation from the ontology.
     */
    public Collection<? extends ServiceManifestation> getAllServiceManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SERVICEMANIFESTATION, DefaultServiceManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Theme
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Theme", Theme.class, DefaultTheme.class);
    }

    /**
     * Creates an instance of type Theme.  Modifies the underlying ontology.
     */
    public Theme createTheme(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THEME, DefaultTheme.class);
    }

    /**
     * Gets an instance of type Theme with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Theme getTheme(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THEME, DefaultTheme.class);
    }

    /**
     * Gets all instances of Theme from the ontology.
     */
    public Collection<? extends Theme> getAllThemeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THEME, DefaultTheme.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#TimePeriod
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#TimePeriod", TimePeriod.class, DefaultTimePeriod.class);
    }

    /**
     * Creates an instance of type TimePeriod.  Modifies the underlying ontology.
     */
    public TimePeriod createTimePeriod(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIMEPERIOD, DefaultTimePeriod.class);
    }

    /**
     * Gets an instance of type TimePeriod with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TimePeriod getTimePeriod(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIMEPERIOD, DefaultTimePeriod.class);
    }

    /**
     * Gets all instances of TimePeriod from the ontology.
     */
    public Collection<? extends TimePeriod> getAllTimePeriodInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIMEPERIOD, DefaultTimePeriod.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Unit
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#Unit", Unit.class, DefaultUnit.class);
    }

    /**
     * Creates an instance of type Unit.  Modifies the underlying ontology.
     */
    public Unit createUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }

    /**
     * Gets an instance of type Unit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Unit getUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }

    /**
     * Gets all instances of Unit from the ontology.
     */
    public Collection<? extends Unit> getAllUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UNIT, DefaultUnit.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#VectorDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#VectorDataset", VectorDataset.class, DefaultVectorDataset.class);
    }

    /**
     * Creates an instance of type VectorDataset.  Modifies the underlying ontology.
     */
    public VectorDataset createVectorDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VECTORDATASET, DefaultVectorDataset.class);
    }

    /**
     * Gets an instance of type VectorDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public VectorDataset getVectorDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VECTORDATASET, DefaultVectorDataset.class);
    }

    /**
     * Gets all instances of VectorDataset from the ontology.
     */
    public Collection<? extends VectorDataset> getAllVectorDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VECTORDATASET, DefaultVectorDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSDataset", WCSDataset.class, DefaultWCSDataset.class);
    }

    /**
     * Creates an instance of type WCSDataset.  Modifies the underlying ontology.
     */
    public WCSDataset createWCSDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WCSDATASET, DefaultWCSDataset.class);
    }

    /**
     * Gets an instance of type WCSDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WCSDataset getWCSDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WCSDATASET, DefaultWCSDataset.class);
    }

    /**
     * Gets all instances of WCSDataset from the ontology.
     */
    public Collection<? extends WCSDataset> getAllWCSDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WCSDATASET, DefaultWCSDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSManifestation", WCSManifestation.class, DefaultWCSManifestation.class);
    }

    /**
     * Creates an instance of type WCSManifestation.  Modifies the underlying ontology.
     */
    public WCSManifestation createWCSManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WCSMANIFESTATION, DefaultWCSManifestation.class);
    }

    /**
     * Gets an instance of type WCSManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WCSManifestation getWCSManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WCSMANIFESTATION, DefaultWCSManifestation.class);
    }

    /**
     * Gets all instances of WCSManifestation from the ontology.
     */
    public Collection<? extends WCSManifestation> getAllWCSManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WCSMANIFESTATION, DefaultWCSManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSResponse
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSResponse", WCSResponse.class, DefaultWCSResponse.class);
    }

    /**
     * Creates an instance of type WCSResponse.  Modifies the underlying ontology.
     */
    public WCSResponse createWCSResponse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WCSRESPONSE, DefaultWCSResponse.class);
    }

    /**
     * Gets an instance of type WCSResponse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WCSResponse getWCSResponse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WCSRESPONSE, DefaultWCSResponse.class);
    }

    /**
     * Gets all instances of WCSResponse from the ontology.
     */
    public Collection<? extends WCSResponse> getAllWCSResponseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WCSRESPONSE, DefaultWCSResponse.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSResponseManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WCSResponseManifestation", WCSResponseManifestation.class, DefaultWCSResponseManifestation.class);
    }

    /**
     * Creates an instance of type WCSResponseManifestation.  Modifies the underlying ontology.
     */
    public WCSResponseManifestation createWCSResponseManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WCSRESPONSEMANIFESTATION, DefaultWCSResponseManifestation.class);
    }

    /**
     * Gets an instance of type WCSResponseManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WCSResponseManifestation getWCSResponseManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WCSRESPONSEMANIFESTATION, DefaultWCSResponseManifestation.class);
    }

    /**
     * Gets all instances of WCSResponseManifestation from the ontology.
     */
    public Collection<? extends WCSResponseManifestation> getAllWCSResponseManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WCSRESPONSEMANIFESTATION, DefaultWCSResponseManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSDataset", WFSDataset.class, DefaultWFSDataset.class);
    }

    /**
     * Creates an instance of type WFSDataset.  Modifies the underlying ontology.
     */
    public WFSDataset createWFSDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WFSDATASET, DefaultWFSDataset.class);
    }

    /**
     * Gets an instance of type WFSDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WFSDataset getWFSDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WFSDATASET, DefaultWFSDataset.class);
    }

    /**
     * Gets all instances of WFSDataset from the ontology.
     */
    public Collection<? extends WFSDataset> getAllWFSDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WFSDATASET, DefaultWFSDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSManifestation", WFSManifestation.class, DefaultWFSManifestation.class);
    }

    /**
     * Creates an instance of type WFSManifestation.  Modifies the underlying ontology.
     */
    public WFSManifestation createWFSManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WFSMANIFESTATION, DefaultWFSManifestation.class);
    }

    /**
     * Gets an instance of type WFSManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WFSManifestation getWFSManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WFSMANIFESTATION, DefaultWFSManifestation.class);
    }

    /**
     * Gets all instances of WFSManifestation from the ontology.
     */
    public Collection<? extends WFSManifestation> getAllWFSManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WFSMANIFESTATION, DefaultWFSManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSResponse
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSResponse", WFSResponse.class, DefaultWFSResponse.class);
    }

    /**
     * Creates an instance of type WFSResponse.  Modifies the underlying ontology.
     */
    public WFSResponse createWFSResponse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WFSRESPONSE, DefaultWFSResponse.class);
    }

    /**
     * Gets an instance of type WFSResponse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WFSResponse getWFSResponse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WFSRESPONSE, DefaultWFSResponse.class);
    }

    /**
     * Gets all instances of WFSResponse from the ontology.
     */
    public Collection<? extends WFSResponse> getAllWFSResponseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WFSRESPONSE, DefaultWFSResponse.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSResponseManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-data.owl#WFSResponseManifestation", WFSResponseManifestation.class, DefaultWFSResponseManifestation.class);
    }

    /**
     * Creates an instance of type WFSResponseManifestation.  Modifies the underlying ontology.
     */
    public WFSResponseManifestation createWFSResponseManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WFSRESPONSEMANIFESTATION, DefaultWFSResponseManifestation.class);
    }

    /**
     * Gets an instance of type WFSResponseManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WFSResponseManifestation getWFSResponseManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WFSRESPONSEMANIFESTATION, DefaultWFSResponseManifestation.class);
    }

    /**
     * Gets all instances of WFSResponseManifestation from the ontology.
     */
    public Collection<? extends WFSResponseManifestation> getAllWFSResponseManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WFSRESPONSEMANIFESTATION, DefaultWFSResponseManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Air
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Air", Air.class, DefaultAir.class);
    }

    /**
     * Creates an instance of type Air.  Modifies the underlying ontology.
     */
    public Air createAir(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AIR, DefaultAir.class);
    }

    /**
     * Gets an instance of type Air with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Air getAir(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AIR, DefaultAir.class);
    }

    /**
     * Gets all instances of Air from the ontology.
     */
    public Collection<? extends Air> getAllAirInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AIR, DefaultAir.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Amount
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Amount", Amount.class, DefaultAmount.class);
    }

    /**
     * Creates an instance of type Amount.  Modifies the underlying ontology.
     */
    public Amount createAmount(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AMOUNT, DefaultAmount.class);
    }

    /**
     * Gets an instance of type Amount with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Amount getAmount(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AMOUNT, DefaultAmount.class);
    }

    /**
     * Gets all instances of Amount from the ontology.
     */
    public Collection<? extends Amount> getAllAmountInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AMOUNT, DefaultAmount.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#AtmosphericFeature
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#AtmosphericFeature", AtmosphericFeature.class, DefaultAtmosphericFeature.class);
    }

    /**
     * Creates an instance of type AtmosphericFeature.  Modifies the underlying ontology.
     */
    public AtmosphericFeature createAtmosphericFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATMOSPHERICFEATURE, DefaultAtmosphericFeature.class);
    }

    /**
     * Gets an instance of type AtmosphericFeature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtmosphericFeature getAtmosphericFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATMOSPHERICFEATURE, DefaultAtmosphericFeature.class);
    }

    /**
     * Gets all instances of AtmosphericFeature from the ontology.
     */
    public Collection<? extends AtmosphericFeature> getAllAtmosphericFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATMOSPHERICFEATURE, DefaultAtmosphericFeature.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ConvertASCIIToTIFF
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ConvertASCIIToTIFF", ConvertASCIIToTIFF.class, DefaultConvertASCIIToTIFF.class);
    }

    /**
     * Creates an instance of type ConvertASCIIToTIFF.  Modifies the underlying ontology.
     */
    public ConvertASCIIToTIFF createConvertASCIIToTIFF(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONVERTASCIITOTIFF, DefaultConvertASCIIToTIFF.class);
    }

    /**
     * Gets an instance of type ConvertASCIIToTIFF with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConvertASCIIToTIFF getConvertASCIIToTIFF(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONVERTASCIITOTIFF, DefaultConvertASCIIToTIFF.class);
    }

    /**
     * Gets all instances of ConvertASCIIToTIFF from the ontology.
     */
    public Collection<? extends ConvertASCIIToTIFF> getAllConvertASCIIToTIFFInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONVERTASCIITOTIFF, DefaultConvertASCIIToTIFF.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ConvertedDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ConvertedDataset", ConvertedDataset.class, DefaultConvertedDataset.class);
    }

    /**
     * Creates an instance of type ConvertedDataset.  Modifies the underlying ontology.
     */
    public ConvertedDataset createConvertedDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONVERTEDDATASET, DefaultConvertedDataset.class);
    }

    /**
     * Gets an instance of type ConvertedDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConvertedDataset getConvertedDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONVERTEDDATASET, DefaultConvertedDataset.class);
    }

    /**
     * Gets all instances of ConvertedDataset from the ontology.
     */
    public Collection<? extends ConvertedDataset> getAllConvertedDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONVERTEDDATASET, DefaultConvertedDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DataBandProcessing
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DataBandProcessing", DataBandProcessing.class, DefaultDataBandProcessing.class);
    }

    /**
     * Creates an instance of type DataBandProcessing.  Modifies the underlying ontology.
     */
    public DataBandProcessing createDataBandProcessing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATABANDPROCESSING, DefaultDataBandProcessing.class);
    }

    /**
     * Gets an instance of type DataBandProcessing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DataBandProcessing getDataBandProcessing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATABANDPROCESSING, DefaultDataBandProcessing.class);
    }

    /**
     * Gets all instances of DataBandProcessing from the ontology.
     */
    public Collection<? extends DataBandProcessing> getAllDataBandProcessingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATABANDPROCESSING, DefaultDataBandProcessing.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DatasetManipulationSoftware
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DatasetManipulationSoftware", DatasetManipulationSoftware.class, DefaultDatasetManipulationSoftware.class);
    }

    /**
     * Creates an instance of type DatasetManipulationSoftware.  Modifies the underlying ontology.
     */
    public DatasetManipulationSoftware createDatasetManipulationSoftware(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASETMANIPULATIONSOFTWARE, DefaultDatasetManipulationSoftware.class);
    }

    /**
     * Gets an instance of type DatasetManipulationSoftware with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DatasetManipulationSoftware getDatasetManipulationSoftware(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASETMANIPULATIONSOFTWARE, DefaultDatasetManipulationSoftware.class);
    }

    /**
     * Gets all instances of DatasetManipulationSoftware from the ontology.
     */
    public Collection<? extends DatasetManipulationSoftware> getAllDatasetManipulationSoftwareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASETMANIPULATIONSOFTWARE, DefaultDatasetManipulationSoftware.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DatasetProcessing
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DatasetProcessing", DatasetProcessing.class, DefaultDatasetProcessing.class);
    }

    /**
     * Creates an instance of type DatasetProcessing.  Modifies the underlying ontology.
     */
    public DatasetProcessing createDatasetProcessing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATASETPROCESSING, DefaultDatasetProcessing.class);
    }

    /**
     * Gets an instance of type DatasetProcessing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DatasetProcessing getDatasetProcessing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATASETPROCESSING, DefaultDatasetProcessing.class);
    }

    /**
     * Gets all instances of DatasetProcessing from the ontology.
     */
    public Collection<? extends DatasetProcessing> getAllDatasetProcessingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATASETPROCESSING, DefaultDatasetProcessing.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DewPointTemperature
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DewPointTemperature", DewPointTemperature.class, DefaultDewPointTemperature.class);
    }

    /**
     * Creates an instance of type DewPointTemperature.  Modifies the underlying ontology.
     */
    public DewPointTemperature createDewPointTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEWPOINTTEMPERATURE, DefaultDewPointTemperature.class);
    }

    /**
     * Gets an instance of type DewPointTemperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DewPointTemperature getDewPointTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEWPOINTTEMPERATURE, DefaultDewPointTemperature.class);
    }

    /**
     * Gets all instances of DewPointTemperature from the ontology.
     */
    public Collection<? extends DewPointTemperature> getAllDewPointTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEWPOINTTEMPERATURE, DefaultDewPointTemperature.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Download
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Download", Download.class, DefaultDownload.class);
    }

    /**
     * Creates an instance of type Download.  Modifies the underlying ontology.
     */
    public Download createDownload(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOWNLOAD, DefaultDownload.class);
    }

    /**
     * Gets an instance of type Download with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Download getDownload(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOWNLOAD, DefaultDownload.class);
    }

    /**
     * Gets all instances of Download from the ontology.
     */
    public Collection<? extends Download> getAllDownloadInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOWNLOAD, DefaultDownload.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DownloadedMODISDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DownloadedMODISDataset", DownloadedMODISDataset.class, DefaultDownloadedMODISDataset.class);
    }

    /**
     * Creates an instance of type DownloadedMODISDataset.  Modifies the underlying ontology.
     */
    public DownloadedMODISDataset createDownloadedMODISDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOWNLOADEDMODISDATASET, DefaultDownloadedMODISDataset.class);
    }

    /**
     * Gets an instance of type DownloadedMODISDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DownloadedMODISDataset getDownloadedMODISDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOWNLOADEDMODISDATASET, DefaultDownloadedMODISDataset.class);
    }

    /**
     * Gets all instances of DownloadedMODISDataset from the ontology.
     */
    public Collection<? extends DownloadedMODISDataset> getAllDownloadedMODISDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOWNLOADEDMODISDATASET, DefaultDownloadedMODISDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DownloadedPRISMDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#DownloadedPRISMDataset", DownloadedPRISMDataset.class, DefaultDownloadedPRISMDataset.class);
    }

    /**
     * Creates an instance of type DownloadedPRISMDataset.  Modifies the underlying ontology.
     */
    public DownloadedPRISMDataset createDownloadedPRISMDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOWNLOADEDPRISMDATASET, DefaultDownloadedPRISMDataset.class);
    }

    /**
     * Gets an instance of type DownloadedPRISMDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DownloadedPRISMDataset getDownloadedPRISMDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOWNLOADEDPRISMDATASET, DefaultDownloadedPRISMDataset.class);
    }

    /**
     * Gets all instances of DownloadedPRISMDataset from the ontology.
     */
    public Collection<? extends DownloadedPRISMDataset> getAllDownloadedPRISMDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOWNLOADEDPRISMDATASET, DefaultDownloadedPRISMDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#EcologicalCommunity
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#EcologicalCommunity", EcologicalCommunity.class, DefaultEcologicalCommunity.class);
    }

    /**
     * Creates an instance of type EcologicalCommunity.  Modifies the underlying ontology.
     */
    public EcologicalCommunity createEcologicalCommunity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ECOLOGICALCOMMUNITY, DefaultEcologicalCommunity.class);
    }

    /**
     * Gets an instance of type EcologicalCommunity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public EcologicalCommunity getEcologicalCommunity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ECOLOGICALCOMMUNITY, DefaultEcologicalCommunity.class);
    }

    /**
     * Gets all instances of EcologicalCommunity from the ontology.
     */
    public Collection<? extends EcologicalCommunity> getAllEcologicalCommunityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ECOLOGICALCOMMUNITY, DefaultEcologicalCommunity.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ExtractAndReproject
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ExtractAndReproject", ExtractAndReproject.class, DefaultExtractAndReproject.class);
    }

    /**
     * Creates an instance of type ExtractAndReproject.  Modifies the underlying ontology.
     */
    public ExtractAndReproject createExtractAndReproject(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXTRACTANDREPROJECT, DefaultExtractAndReproject.class);
    }

    /**
     * Gets an instance of type ExtractAndReproject with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExtractAndReproject getExtractAndReproject(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXTRACTANDREPROJECT, DefaultExtractAndReproject.class);
    }

    /**
     * Gets all instances of ExtractAndReproject from the ontology.
     */
    public Collection<? extends ExtractAndReproject> getAllExtractAndReprojectInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXTRACTANDREPROJECT, DefaultExtractAndReproject.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ExtractedDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ExtractedDataset", ExtractedDataset.class, DefaultExtractedDataset.class);
    }

    /**
     * Creates an instance of type ExtractedDataset.  Modifies the underlying ontology.
     */
    public ExtractedDataset createExtractedDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EXTRACTEDDATASET, DefaultExtractedDataset.class);
    }

    /**
     * Gets an instance of type ExtractedDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ExtractedDataset getExtractedDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EXTRACTEDDATASET, DefaultExtractedDataset.class);
    }

    /**
     * Gets all instances of ExtractedDataset from the ontology.
     */
    public Collection<? extends ExtractedDataset> getAllExtractedDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EXTRACTEDDATASET, DefaultExtractedDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Index
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Index", Index.class, DefaultIndex.class);
    }

    /**
     * Creates an instance of type Index.  Modifies the underlying ontology.
     */
    public Index createIndex(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INDEX, DefaultIndex.class);
    }

    /**
     * Gets an instance of type Index with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Index getIndex(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INDEX, DefaultIndex.class);
    }

    /**
     * Gets all instances of Index from the ontology.
     */
    public Collection<? extends Index> getAllIndexInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INDEX, DefaultIndex.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MODISDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MODISDataset", MODISDataset.class, DefaultMODISDataset.class);
    }

    /**
     * Creates an instance of type MODISDataset.  Modifies the underlying ontology.
     */
    public MODISDataset createMODISDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODISDATASET, DefaultMODISDataset.class);
    }

    /**
     * Gets an instance of type MODISDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MODISDataset getMODISDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODISDATASET, DefaultMODISDataset.class);
    }

    /**
     * Gets all instances of MODISDataset from the ontology.
     */
    public Collection<? extends MODISDataset> getAllMODISDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODISDATASET, DefaultMODISDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MODISMeasurement
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MODISMeasurement", MODISMeasurement.class, DefaultMODISMeasurement.class);
    }

    /**
     * Creates an instance of type MODISMeasurement.  Modifies the underlying ontology.
     */
    public MODISMeasurement createMODISMeasurement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODISMEASUREMENT, DefaultMODISMeasurement.class);
    }

    /**
     * Gets an instance of type MODISMeasurement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MODISMeasurement getMODISMeasurement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODISMEASUREMENT, DefaultMODISMeasurement.class);
    }

    /**
     * Gets all instances of MODISMeasurement from the ontology.
     */
    public Collection<? extends MODISMeasurement> getAllMODISMeasurementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODISMEASUREMENT, DefaultMODISMeasurement.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Measurement
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Measurement", Measurement.class, DefaultMeasurement.class);
    }

    /**
     * Creates an instance of type Measurement.  Modifies the underlying ontology.
     */
    public Measurement createMeasurement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEASUREMENT, DefaultMeasurement.class);
    }

    /**
     * Gets an instance of type Measurement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Measurement getMeasurement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEASUREMENT, DefaultMeasurement.class);
    }

    /**
     * Gets all instances of Measurement from the ontology.
     */
    public Collection<? extends Measurement> getAllMeasurementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEASUREMENT, DefaultMeasurement.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Modelling
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Modelling", Modelling.class, DefaultModelling.class);
    }

    /**
     * Creates an instance of type Modelling.  Modifies the underlying ontology.
     */
    public Modelling createModelling(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODELLING, DefaultModelling.class);
    }

    /**
     * Gets an instance of type Modelling with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Modelling getModelling(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODELLING, DefaultModelling.class);
    }

    /**
     * Gets all instances of Modelling from the ontology.
     */
    public Collection<? extends Modelling> getAllModellingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODELLING, DefaultModelling.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ModellingAgent
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ModellingAgent", ModellingAgent.class, DefaultModellingAgent.class);
    }

    /**
     * Creates an instance of type ModellingAgent.  Modifies the underlying ontology.
     */
    public ModellingAgent createModellingAgent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MODELLINGAGENT, DefaultModellingAgent.class);
    }

    /**
     * Gets an instance of type ModellingAgent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ModellingAgent getModellingAgent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MODELLINGAGENT, DefaultModellingAgent.class);
    }

    /**
     * Gets all instances of ModellingAgent from the ontology.
     */
    public Collection<? extends ModellingAgent> getAllModellingAgentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MODELLINGAGENT, DefaultModellingAgent.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Mosaic
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Mosaic", Mosaic.class, DefaultMosaic.class);
    }

    /**
     * Creates an instance of type Mosaic.  Modifies the underlying ontology.
     */
    public Mosaic createMosaic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOSAIC, DefaultMosaic.class);
    }

    /**
     * Gets an instance of type Mosaic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mosaic getMosaic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOSAIC, DefaultMosaic.class);
    }

    /**
     * Gets all instances of Mosaic from the ontology.
     */
    public Collection<? extends Mosaic> getAllMosaicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOSAIC, DefaultMosaic.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MosaicDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#MosaicDataset", MosaicDataset.class, DefaultMosaicDataset.class);
    }

    /**
     * Creates an instance of type MosaicDataset.  Modifies the underlying ontology.
     */
    public MosaicDataset createMosaicDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOSAICDATASET, DefaultMosaicDataset.class);
    }

    /**
     * Gets an instance of type MosaicDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MosaicDataset getMosaicDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOSAICDATASET, DefaultMosaicDataset.class);
    }

    /**
     * Gets all instances of MosaicDataset from the ontology.
     */
    public Collection<? extends MosaicDataset> getAllMosaicDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOSAICDATASET, DefaultMosaicDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PRISMDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PRISMDataset", PRISMDataset.class, DefaultPRISMDataset.class);
    }

    /**
     * Creates an instance of type PRISMDataset.  Modifies the underlying ontology.
     */
    public PRISMDataset createPRISMDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRISMDATASET, DefaultPRISMDataset.class);
    }

    /**
     * Gets an instance of type PRISMDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PRISMDataset getPRISMDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRISMDATASET, DefaultPRISMDataset.class);
    }

    /**
     * Gets all instances of PRISMDataset from the ontology.
     */
    public Collection<? extends PRISMDataset> getAllPRISMDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRISMDATASET, DefaultPRISMDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PRISMModelling
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PRISMModelling", PRISMModelling.class, DefaultPRISMModelling.class);
    }

    /**
     * Creates an instance of type PRISMModelling.  Modifies the underlying ontology.
     */
    public PRISMModelling createPRISMModelling(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRISMMODELLING, DefaultPRISMModelling.class);
    }

    /**
     * Gets an instance of type PRISMModelling with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PRISMModelling getPRISMModelling(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRISMMODELLING, DefaultPRISMModelling.class);
    }

    /**
     * Gets all instances of PRISMModelling from the ontology.
     */
    public Collection<? extends PRISMModelling> getAllPRISMModellingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRISMMODELLING, DefaultPRISMModelling.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Precipitation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Precipitation", Precipitation.class, DefaultPrecipitation.class);
    }

    /**
     * Creates an instance of type Precipitation.  Modifies the underlying ontology.
     */
    public Precipitation createPrecipitation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRECIPITATION, DefaultPrecipitation.class);
    }

    /**
     * Gets an instance of type Precipitation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Precipitation getPrecipitation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRECIPITATION, DefaultPrecipitation.class);
    }

    /**
     * Gets all instances of Precipitation from the ontology.
     */
    public Collection<? extends Precipitation> getAllPrecipitationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRECIPITATION, DefaultPrecipitation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Processing
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Processing", Processing.class, DefaultProcessing.class);
    }

    /**
     * Creates an instance of type Processing.  Modifies the underlying ontology.
     */
    public Processing createProcessing(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSING, DefaultProcessing.class);
    }

    /**
     * Gets an instance of type Processing with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Processing getProcessing(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSING, DefaultProcessing.class);
    }

    /**
     * Gets all instances of Processing from the ontology.
     */
    public Collection<? extends Processing> getAllProcessingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSING, DefaultProcessing.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Processor
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Processor", Processor.class, DefaultProcessor.class);
    }

    /**
     * Creates an instance of type Processor.  Modifies the underlying ontology.
     */
    public Processor createProcessor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSOR, DefaultProcessor.class);
    }

    /**
     * Gets an instance of type Processor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Processor getProcessor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSOR, DefaultProcessor.class);
    }

    /**
     * Gets all instances of Processor from the ontology.
     */
    public Collection<? extends Processor> getAllProcessorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSOR, DefaultProcessor.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Publish
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Publish", Publish.class, DefaultPublish.class);
    }

    /**
     * Creates an instance of type Publish.  Modifies the underlying ontology.
     */
    public Publish createPublish(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLISH, DefaultPublish.class);
    }

    /**
     * Gets an instance of type Publish with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Publish getPublish(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLISH, DefaultPublish.class);
    }

    /**
     * Gets all instances of Publish from the ontology.
     */
    public Collection<? extends Publish> getAllPublishInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLISH, DefaultPublish.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PublishedMODISDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PublishedMODISDataset", PublishedMODISDataset.class, DefaultPublishedMODISDataset.class);
    }

    /**
     * Creates an instance of type PublishedMODISDataset.  Modifies the underlying ontology.
     */
    public PublishedMODISDataset createPublishedMODISDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLISHEDMODISDATASET, DefaultPublishedMODISDataset.class);
    }

    /**
     * Gets an instance of type PublishedMODISDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PublishedMODISDataset getPublishedMODISDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLISHEDMODISDATASET, DefaultPublishedMODISDataset.class);
    }

    /**
     * Gets all instances of PublishedMODISDataset from the ontology.
     */
    public Collection<? extends PublishedMODISDataset> getAllPublishedMODISDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLISHEDMODISDATASET, DefaultPublishedMODISDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PublishedPRISMDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#PublishedPRISMDataset", PublishedPRISMDataset.class, DefaultPublishedPRISMDataset.class);
    }

    /**
     * Creates an instance of type PublishedPRISMDataset.  Modifies the underlying ontology.
     */
    public PublishedPRISMDataset createPublishedPRISMDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PUBLISHEDPRISMDATASET, DefaultPublishedPRISMDataset.class);
    }

    /**
     * Gets an instance of type PublishedPRISMDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PublishedPRISMDataset getPublishedPRISMDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PUBLISHEDPRISMDATASET, DefaultPublishedPRISMDataset.class);
    }

    /**
     * Gets all instances of PublishedPRISMDataset from the ontology.
     */
    public Collection<? extends PublishedPRISMDataset> getAllPublishedPRISMDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PUBLISHEDPRISMDATASET, DefaultPublishedPRISMDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISCharacteristic
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISCharacteristic", RGISCharacteristic.class, DefaultRGISCharacteristic.class);
    }

    /**
     * Creates an instance of type RGISCharacteristic.  Modifies the underlying ontology.
     */
    public RGISCharacteristic createRGISCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISCHARACTERISTIC, DefaultRGISCharacteristic.class);
    }

    /**
     * Gets an instance of type RGISCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISCharacteristic getRGISCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISCHARACTERISTIC, DefaultRGISCharacteristic.class);
    }

    /**
     * Gets all instances of RGISCharacteristic from the ontology.
     */
    public Collection<? extends RGISCharacteristic> getAllRGISCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISCHARACTERISTIC, DefaultRGISCharacteristic.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISDataBand
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISDataBand", RGISDataBand.class, DefaultRGISDataBand.class);
    }

    /**
     * Creates an instance of type RGISDataBand.  Modifies the underlying ontology.
     */
    public RGISDataBand createRGISDataBand(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISDATABAND, DefaultRGISDataBand.class);
    }

    /**
     * Gets an instance of type RGISDataBand with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISDataBand getRGISDataBand(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISDATABAND, DefaultRGISDataBand.class);
    }

    /**
     * Gets all instances of RGISDataBand from the ontology.
     */
    public Collection<? extends RGISDataBand> getAllRGISDataBandInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISDATABAND, DefaultRGISDataBand.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISEntity
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISEntity", RGISEntity.class, DefaultRGISEntity.class);
    }

    /**
     * Creates an instance of type RGISEntity.  Modifies the underlying ontology.
     */
    public RGISEntity createRGISEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISENTITY, DefaultRGISEntity.class);
    }

    /**
     * Gets an instance of type RGISEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISEntity getRGISEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISENTITY, DefaultRGISEntity.class);
    }

    /**
     * Gets all instances of RGISEntity from the ontology.
     */
    public Collection<? extends RGISEntity> getAllRGISEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISENTITY, DefaultRGISEntity.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISPrepublishedRasterDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISPrepublishedRasterDataset", RGISPrepublishedRasterDataset.class, DefaultRGISPrepublishedRasterDataset.class);
    }

    /**
     * Creates an instance of type RGISPrepublishedRasterDataset.  Modifies the underlying ontology.
     */
    public RGISPrepublishedRasterDataset createRGISPrepublishedRasterDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISPREPUBLISHEDRASTERDATASET, DefaultRGISPrepublishedRasterDataset.class);
    }

    /**
     * Gets an instance of type RGISPrepublishedRasterDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISPrepublishedRasterDataset getRGISPrepublishedRasterDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISPREPUBLISHEDRASTERDATASET, DefaultRGISPrepublishedRasterDataset.class);
    }

    /**
     * Gets all instances of RGISPrepublishedRasterDataset from the ontology.
     */
    public Collection<? extends RGISPrepublishedRasterDataset> getAllRGISPrepublishedRasterDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISPREPUBLISHEDRASTERDATASET, DefaultRGISPrepublishedRasterDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISUnit
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISUnit", RGISUnit.class, DefaultRGISUnit.class);
    }

    /**
     * Creates an instance of type RGISUnit.  Modifies the underlying ontology.
     */
    public RGISUnit createRGISUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISUNIT, DefaultRGISUnit.class);
    }

    /**
     * Gets an instance of type RGISUnit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISUnit getRGISUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISUNIT, DefaultRGISUnit.class);
    }

    /**
     * Gets all instances of RGISUnit from the ontology.
     */
    public Collection<? extends RGISUnit> getAllRGISUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISUNIT, DefaultRGISUnit.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISWCSDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISWCSDataset", RGISWCSDataset.class, DefaultRGISWCSDataset.class);
    }

    /**
     * Creates an instance of type RGISWCSDataset.  Modifies the underlying ontology.
     */
    public RGISWCSDataset createRGISWCSDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISWCSDATASET, DefaultRGISWCSDataset.class);
    }

    /**
     * Gets an instance of type RGISWCSDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISWCSDataset getRGISWCSDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISWCSDATASET, DefaultRGISWCSDataset.class);
    }

    /**
     * Gets all instances of RGISWCSDataset from the ontology.
     */
    public Collection<? extends RGISWCSDataset> getAllRGISWCSDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISWCSDATASET, DefaultRGISWCSDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISWCSManifestation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#RGISWCSManifestation", RGISWCSManifestation.class, DefaultRGISWCSManifestation.class);
    }

    /**
     * Creates an instance of type RGISWCSManifestation.  Modifies the underlying ontology.
     */
    public RGISWCSManifestation createRGISWCSManifestation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RGISWCSMANIFESTATION, DefaultRGISWCSManifestation.class);
    }

    /**
     * Gets an instance of type RGISWCSManifestation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RGISWCSManifestation getRGISWCSManifestation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RGISWCSMANIFESTATION, DefaultRGISWCSManifestation.class);
    }

    /**
     * Gets all instances of RGISWCSManifestation from the ontology.
     */
    public Collection<? extends RGISWCSManifestation> getAllRGISWCSManifestationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RGISWCSMANIFESTATION, DefaultRGISWCSManifestation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Reproject
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Reproject", Reproject.class, DefaultReproject.class);
    }

    /**
     * Creates an instance of type Reproject.  Modifies the underlying ontology.
     */
    public Reproject createReproject(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REPROJECT, DefaultReproject.class);
    }

    /**
     * Gets an instance of type Reproject with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reproject getReproject(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REPROJECT, DefaultReproject.class);
    }

    /**
     * Gets all instances of Reproject from the ontology.
     */
    public Collection<? extends Reproject> getAllReprojectInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REPROJECT, DefaultReproject.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ReprojectedDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#ReprojectedDataset", ReprojectedDataset.class, DefaultReprojectedDataset.class);
    }

    /**
     * Creates an instance of type ReprojectedDataset.  Modifies the underlying ontology.
     */
    public ReprojectedDataset createReprojectedDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REPROJECTEDDATASET, DefaultReprojectedDataset.class);
    }

    /**
     * Gets an instance of type ReprojectedDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ReprojectedDataset getReprojectedDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REPROJECTEDDATASET, DefaultReprojectedDataset.class);
    }

    /**
     * Gets all instances of ReprojectedDataset from the ontology.
     */
    public Collection<? extends ReprojectedDataset> getAllReprojectedDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REPROJECTEDDATASET, DefaultReprojectedDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Sensor
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Sensor", Sensor.class, DefaultSensor.class);
    }

    /**
     * Creates an instance of type Sensor.  Modifies the underlying ontology.
     */
    public Sensor createSensor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }

    /**
     * Gets an instance of type Sensor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sensor getSensor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }

    /**
     * Gets all instances of Sensor from the ontology.
     */
    public Collection<? extends Sensor> getAllSensorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SENSOR, DefaultSensor.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#SurfaceLayer
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#SurfaceLayer", SurfaceLayer.class, DefaultSurfaceLayer.class);
    }

    /**
     * Creates an instance of type SurfaceLayer.  Modifies the underlying ontology.
     */
    public SurfaceLayer createSurfaceLayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SURFACELAYER, DefaultSurfaceLayer.class);
    }

    /**
     * Gets an instance of type SurfaceLayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SurfaceLayer getSurfaceLayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SURFACELAYER, DefaultSurfaceLayer.class);
    }

    /**
     * Gets all instances of SurfaceLayer from the ontology.
     */
    public Collection<? extends SurfaceLayer> getAllSurfaceLayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SURFACELAYER, DefaultSurfaceLayer.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Temperature
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Temperature", Temperature.class, DefaultTemperature.class);
    }

    /**
     * Creates an instance of type Temperature.  Modifies the underlying ontology.
     */
    public Temperature createTemperature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }

    /**
     * Gets an instance of type Temperature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temperature getTemperature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }

    /**
     * Gets all instances of Temperature from the ontology.
     */
    public Collection<? extends Temperature> getAllTemperatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPERATURE, DefaultTemperature.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#TerrestrialFeature
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#TerrestrialFeature", TerrestrialFeature.class, DefaultTerrestrialFeature.class);
    }

    /**
     * Creates an instance of type TerrestrialFeature.  Modifies the underlying ontology.
     */
    public TerrestrialFeature createTerrestrialFeature(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TERRESTRIALFEATURE, DefaultTerrestrialFeature.class);
    }

    /**
     * Gets an instance of type TerrestrialFeature with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TerrestrialFeature getTerrestrialFeature(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TERRESTRIALFEATURE, DefaultTerrestrialFeature.class);
    }

    /**
     * Gets all instances of TerrestrialFeature from the ontology.
     */
    public Collection<? extends TerrestrialFeature> getAllTerrestrialFeatureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TERRESTRIALFEATURE, DefaultTerrestrialFeature.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Vegetation
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-edac.owl#Vegetation", Vegetation.class, DefaultVegetation.class);
    }

    /**
     * Creates an instance of type Vegetation.  Modifies the underlying ontology.
     */
    public Vegetation createVegetation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VEGETATION, DefaultVegetation.class);
    }

    /**
     * Gets an instance of type Vegetation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vegetation getVegetation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VEGETATION, DefaultVegetation.class);
    }

    /**
     * Gets all instances of Vegetation from the ontology.
     */
    public Collection<? extends Vegetation> getAllVegetationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VEGETATION, DefaultVegetation.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperAlgorithm
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperAlgorithm", LifemapperAlgorithm.class, DefaultLifemapperAlgorithm.class);
    }

    /**
     * Creates an instance of type LifemapperAlgorithm.  Modifies the underlying ontology.
     */
    public LifemapperAlgorithm createLifemapperAlgorithm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERALGORITHM, DefaultLifemapperAlgorithm.class);
    }

    /**
     * Gets an instance of type LifemapperAlgorithm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LifemapperAlgorithm getLifemapperAlgorithm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERALGORITHM, DefaultLifemapperAlgorithm.class);
    }

    /**
     * Gets all instances of LifemapperAlgorithm from the ontology.
     */
    public Collection<? extends LifemapperAlgorithm> getAllLifemapperAlgorithmInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIFEMAPPERALGORITHM, DefaultLifemapperAlgorithm.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperParameter
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperParameter", LifemapperParameter.class, DefaultLifemapperParameter.class);
    }

    /**
     * Creates an instance of type LifemapperParameter.  Modifies the underlying ontology.
     */
    public LifemapperParameter createLifemapperParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERPARAMETER, DefaultLifemapperParameter.class);
    }

    /**
     * Gets an instance of type LifemapperParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LifemapperParameter getLifemapperParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERPARAMETER, DefaultLifemapperParameter.class);
    }

    /**
     * Gets all instances of LifemapperParameter from the ontology.
     */
    public Collection<? extends LifemapperParameter> getAllLifemapperParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIFEMAPPERPARAMETER, DefaultLifemapperParameter.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperSoftware
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#LifemapperSoftware", LifemapperSoftware.class, DefaultLifemapperSoftware.class);
    }

    /**
     * Creates an instance of type LifemapperSoftware.  Modifies the underlying ontology.
     */
    public LifemapperSoftware createLifemapperSoftware(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERSOFTWARE, DefaultLifemapperSoftware.class);
    }

    /**
     * Gets an instance of type LifemapperSoftware with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LifemapperSoftware getLifemapperSoftware(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LIFEMAPPERSOFTWARE, DefaultLifemapperSoftware.class);
    }

    /**
     * Gets all instances of LifemapperSoftware from the ontology.
     */
    public Collection<? extends LifemapperSoftware> getAllLifemapperSoftwareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LIFEMAPPERSOFTWARE, DefaultLifemapperSoftware.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#ParameterDescription
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#ParameterDescription", ParameterDescription.class, DefaultParameterDescription.class);
    }

    /**
     * Creates an instance of type ParameterDescription.  Modifies the underlying ontology.
     */
    public ParameterDescription createParameterDescription(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARAMETERDESCRIPTION, DefaultParameterDescription.class);
    }

    /**
     * Gets an instance of type ParameterDescription with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParameterDescription getParameterDescription(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARAMETERDESCRIPTION, DefaultParameterDescription.class);
    }

    /**
     * Gets all instances of ParameterDescription from the ontology.
     */
    public Collection<? extends ParameterDescription> getAllParameterDescriptionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARAMETERDESCRIPTION, DefaultParameterDescription.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#ParameterDescriptions
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#ParameterDescriptions", ParameterDescriptions.class, DefaultParameterDescriptions.class);
    }

    /**
     * Creates an instance of type ParameterDescriptions.  Modifies the underlying ontology.
     */
    public ParameterDescriptions createParameterDescriptions(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PARAMETERDESCRIPTIONS, DefaultParameterDescriptions.class);
    }

    /**
     * Gets an instance of type ParameterDescriptions with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ParameterDescriptions getParameterDescriptions(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PARAMETERDESCRIPTIONS, DefaultParameterDescriptions.class);
    }

    /**
     * Gets all instances of ParameterDescriptions from the ontology.
     */
    public Collection<? extends ParameterDescriptions> getAllParameterDescriptionsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PARAMETERDESCRIPTIONS, DefaultParameterDescriptions.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#Species
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#Species", Species.class, DefaultSpecies.class);
    }

    /**
     * Creates an instance of type Species.  Modifies the underlying ontology.
     */
    public Species createSpecies(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIES, DefaultSpecies.class);
    }

    /**
     * Gets an instance of type Species with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Species getSpecies(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIES, DefaultSpecies.class);
    }

    /**
     * Gets all instances of Species from the ontology.
     */
    public Collection<? extends Species> getAllSpeciesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIES, DefaultSpecies.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceDataset
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceDataset", SpeciesOccurrenceDataset.class, DefaultSpeciesOccurrenceDataset.class);
    }

    /**
     * Creates an instance of type SpeciesOccurrenceDataset.  Modifies the underlying ontology.
     */
    public SpeciesOccurrenceDataset createSpeciesOccurrenceDataset(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCEDATASET, DefaultSpeciesOccurrenceDataset.class);
    }

    /**
     * Gets an instance of type SpeciesOccurrenceDataset with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesOccurrenceDataset getSpeciesOccurrenceDataset(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCEDATASET, DefaultSpeciesOccurrenceDataset.class);
    }

    /**
     * Gets all instances of SpeciesOccurrenceDataset from the ontology.
     */
    public Collection<? extends SpeciesOccurrenceDataset> getAllSpeciesOccurrenceDatasetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESOCCURRENCEDATASET, DefaultSpeciesOccurrenceDataset.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceLayer
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceLayer", SpeciesOccurrenceLayer.class, DefaultSpeciesOccurrenceLayer.class);
    }

    /**
     * Creates an instance of type SpeciesOccurrenceLayer.  Modifies the underlying ontology.
     */
    public SpeciesOccurrenceLayer createSpeciesOccurrenceLayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCELAYER, DefaultSpeciesOccurrenceLayer.class);
    }

    /**
     * Gets an instance of type SpeciesOccurrenceLayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesOccurrenceLayer getSpeciesOccurrenceLayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCELAYER, DefaultSpeciesOccurrenceLayer.class);
    }

    /**
     * Gets all instances of SpeciesOccurrenceLayer from the ontology.
     */
    public Collection<? extends SpeciesOccurrenceLayer> getAllSpeciesOccurrenceLayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESOCCURRENCELAYER, DefaultSpeciesOccurrenceLayer.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceSet
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-lifemapper.owl#SpeciesOccurrenceSet", SpeciesOccurrenceSet.class, DefaultSpeciesOccurrenceSet.class);
    }

    /**
     * Creates an instance of type SpeciesOccurrenceSet.  Modifies the underlying ontology.
     */
    public SpeciesOccurrenceSet createSpeciesOccurrenceSet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCESET, DefaultSpeciesOccurrenceSet.class);
    }

    /**
     * Gets an instance of type SpeciesOccurrenceSet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesOccurrenceSet getSpeciesOccurrenceSet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESOCCURRENCESET, DefaultSpeciesOccurrenceSet.class);
    }

    /**
     * Gets all instances of SpeciesOccurrenceSet from the ontology.
     */
    public Collection<? extends SpeciesOccurrenceSet> getAllSpeciesOccurrenceSetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESOCCURRENCESET, DefaultSpeciesOccurrenceSet.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingAlgorithm
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingAlgorithm", SpeciesModellingAlgorithm.class, DefaultSpeciesModellingAlgorithm.class);
    }

    /**
     * Creates an instance of type SpeciesModellingAlgorithm.  Modifies the underlying ontology.
     */
    public SpeciesModellingAlgorithm createSpeciesModellingAlgorithm(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGALGORITHM, DefaultSpeciesModellingAlgorithm.class);
    }

    /**
     * Gets an instance of type SpeciesModellingAlgorithm with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesModellingAlgorithm getSpeciesModellingAlgorithm(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGALGORITHM, DefaultSpeciesModellingAlgorithm.class);
    }

    /**
     * Gets all instances of SpeciesModellingAlgorithm from the ontology.
     */
    public Collection<? extends SpeciesModellingAlgorithm> getAllSpeciesModellingAlgorithmInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESMODELLINGALGORITHM, DefaultSpeciesModellingAlgorithm.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingParameter
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingParameter", SpeciesModellingParameter.class, DefaultSpeciesModellingParameter.class);
    }

    /**
     * Creates an instance of type SpeciesModellingParameter.  Modifies the underlying ontology.
     */
    public SpeciesModellingParameter createSpeciesModellingParameter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGPARAMETER, DefaultSpeciesModellingParameter.class);
    }

    /**
     * Gets an instance of type SpeciesModellingParameter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesModellingParameter getSpeciesModellingParameter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGPARAMETER, DefaultSpeciesModellingParameter.class);
    }

    /**
     * Gets all instances of SpeciesModellingParameter from the ontology.
     */
    public Collection<? extends SpeciesModellingParameter> getAllSpeciesModellingParameterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESMODELLINGPARAMETER, DefaultSpeciesModellingParameter.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingParameters
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingParameters", SpeciesModellingParameters.class, DefaultSpeciesModellingParameters.class);
    }

    /**
     * Creates an instance of type SpeciesModellingParameters.  Modifies the underlying ontology.
     */
    public SpeciesModellingParameters createSpeciesModellingParameters(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGPARAMETERS, DefaultSpeciesModellingParameters.class);
    }

    /**
     * Gets an instance of type SpeciesModellingParameters with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesModellingParameters getSpeciesModellingParameters(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGPARAMETERS, DefaultSpeciesModellingParameters.class);
    }

    /**
     * Gets all instances of SpeciesModellingParameters from the ontology.
     */
    public Collection<? extends SpeciesModellingParameters> getAllSpeciesModellingParametersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESMODELLINGPARAMETERS, DefaultSpeciesModellingParameters.class);
    }


    /* ***************************************************
     * Class http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingSoftware
     */

    {
        javaMapping.add("http://ontology.cybershare.utep.edu/ELSEWeb/elseweb-modelling.owl#SpeciesModellingSoftware", SpeciesModellingSoftware.class, DefaultSpeciesModellingSoftware.class);
    }

    /**
     * Creates an instance of type SpeciesModellingSoftware.  Modifies the underlying ontology.
     */
    public SpeciesModellingSoftware createSpeciesModellingSoftware(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGSOFTWARE, DefaultSpeciesModellingSoftware.class);
    }

    /**
     * Gets an instance of type SpeciesModellingSoftware with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpeciesModellingSoftware getSpeciesModellingSoftware(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIESMODELLINGSOFTWARE, DefaultSpeciesModellingSoftware.class);
    }

    /**
     * Gets all instances of SpeciesModellingSoftware from the ontology.
     */
    public Collection<? extends SpeciesModellingSoftware> getAllSpeciesModellingSoftwareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIESMODELLINGSOFTWARE, DefaultSpeciesModellingSoftware.class);
    }


}
